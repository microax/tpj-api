package rpc;
/**
 * MediaServerChannel -- Async REST-RPC channel 
 *
 * History:
 * --------
 * 19-11-11 mgill  Initial Creation. 
 */
import java.lang.*;
import java.util.*;
import java.io.*;
import com.qkernel.*;
import com.qkernel.batch.*;
import com.qkernel.json.*;
import com.qkernel.http.HTTPServer.*;
import common.SpnConstants;
import daemon.SpnConfig;
import daemon.SpnContainer;
import model.*;
/**
 * {@code MediaServerChannel} 
 * <p>
 * Methods:
 * --------
 * endStreams()
 * initialize()
 * dispatch()
 * callback()
 * put()
 *
 */
public final class MediaServerChannel extends Qbatch implements SpnConstants
{
    protected  MediaServerQueue mediaServerQueue[];
    protected  com.qkernel.Queue list;
    protected  int numQueues	=0;

   /**
    * endStreams
    *
    * This method will terminate a Red5 broadcast via a 
    * Queued RPC 
    *
    * @param  String uuid of broadcast
    * @return void
    */
    public void endStreams(String broadcastId)
    {
	QMessage m = new QMessage();
	
        m.putInt("CHN-STATUS", 0);
	m.putString("CHN-ACCOUNT-LOG", "");
	
	m.putString("FUNC",        "endStreams");
	m.putString("BROADCAST_ID", broadcastId);
        this.put(m);
    }

    /**
    * callback 
    *
    * Completion callback for batch process is called by one of the 
    * batch Queue processors when it's execution loop is complete.
    * (this class's super can re-try batches if required)
    *
    * @param  QMessage -- Original message with status
    * @return void
    */
    public void callback(QMessage m)
    {
        int     status = m.getInt("CHN-STATUS");
	String  log    = m.getString("CHN-ACCOUNT-LOG");
	daemon.log(log);
    }

   /**
    * put
    * 
    * Method to put a batch into a processing queue -- put actually calls dispatch
    * and initializes re-try parameters. here we simply call the super class method
    * as it does everything we need.
    *
    * @param  QMessage -- Batch request.
    * @return void
    */
    public void put(QMessage m)
    {
        super.put(m);
    }

    
   /**
    * dispatch 
    *
    * Place batch onto a Processing Queue.
    * This algorithm uses a circular FIFO placement. 
    *
    * @param  QMessage -- Batch sent from Business Object.
    * @return void
    *
    */
    public void dispatch(QMessage m)
    {
	synchronized(list)
	{
	MediaServerQueue cnode = (MediaServerQueue)list.Dequeue();
	cnode.sendMessage(m);
	list.Enqueue(cnode);
	}
    }


   /**
    * initialize 
    *
    * Initialize the channel...here we build Processing Queues
    *
    * @param  void
    * @return void
    */
    public void initialize()
    {
	list 	    = new com.qkernel.Queue();	
	mediaServerQueue = new MediaServerQueue[numQueues];

	for(int i=0; i < numQueues; i++)
	{
	    mediaServerQueue[i] = new MediaServerQueue("MEDIA_SERVER QUEUE" +i, this, daemon);
	    mediaServerQueue[i].start();
	    list.Enqueue(mediaServerQueue[i]);
	}
	daemon.log(numQueues+" Media Server Queues started...");
    }

   /**
    * Public constructor  
    *
    * Constructs stuff :-)
    *
    * @param  String name
    * @param  Daemon d
    *
    */
    public MediaServerChannel(String name, Daemon d, int queues)
    {
    	super(name,d);
	daemon=d;
	numQueues = queues;
    }
}
