package rpc;
/**
 * MediaServerQueue -- Async REST-RPC channel processor 
 *
 * History:
 * --------
 * 19-11-11 mgill  Initial Creation. 
 */
import java.lang.*;
import java.util.*;
import java.io.*;
import com.qkernel.*;
import com.qkernel.batch.*;
import com.qkernel.json.*;
import com.qkernel.http.HTTPServer.*;
import common.SpnConstants;
import daemon.SpnConfig;
import daemon.SpnContainer;
import model.*;
/**
 * {@code MediaServerQueue} 
 * <p>
 * Methods:
 * --------
 * batchProcess()
 *
 */
public final class MediaServerQueue extends BatchQueue implements SpnConstants{

    private  SpnContainer container = (SpnContainer)daemon.lookup(CONTAINER);
    private  SpnConfig    config    = (SpnConfig)daemon.lookup(CONFIG);
    private  eo_profiles  profiles  = container.profiles;

   /**
    * batchProcess 
    *
    * handles the batch-processing task for making Async REST RPC calls.
    * The Qbatch interface invokes a callback to the channel when batchProcess() returns.
    *
    * @param  QMessage -- Batch sent from Business Object.
    * @return void
    *
    */
    public void batchProcess(QMessage batch)
    {
	try
	{
            //----------------------------------------
	    // Red5pro server
	    //----------------------------------------
	    String url = config.getRed5Url();
	    String user= config.getRed5User();
	    String pass= config.getRed5AccessToken();
            MediaServerApi mediaServerApi = new MediaServerApi(url, user, pass, daemon);
	    
            //------------------------------------------------------------------------------
	    // This is simple:
	    // 1) get list of participants in broadcast who's streams we want to terminate
	    // 2) call red5 rpc to unpublish those streams.
	    //-------------------------------------------------------------------------------
	    if( batch.getString("FUNC").equals("endStreams"))
	    {
                ArrayList<vo_profiles> participants = profiles.findParticipants(batch.getString("BROADCAST_ID"));
                participants.forEach(n->mediaServerApi.endStream(n.prof_id));
	    }
            //--------------------------------------
	    // give callback() a happy status...
	    //--------------------------------------
	    batch.putInt("CHN-STATUS",0);
            batch.putString("CHN-ACCOUNT-LOG","MediaServerQueue finished.");
	}
	catch(Exception e)
	{
	    //---------------------------------------------------------
	    // We had some issues...set error status and batch log
	    //---------------------------------------------------------
	    batch.putInt("CHN-STATUS",-1);
	    batch.putString("CHN-ACCOUNT-LOG","***ERROR*** exception thrown");
	    daemon.log(e);
	}
    }


   /**
    * Public constructor  
    *
    * Constructs stuff :-)
    *
    * @param  String name
    * @param  MediaServerChannel channel
    * @param  Daemon d
    *
    */
    public MediaServerQueue(String name, MediaServerChannel c, Daemon d)
    {
	super(name,c,d);
    }
}
